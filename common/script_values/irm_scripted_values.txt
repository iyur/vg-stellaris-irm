# IRM: Imperial Routine Mod
# Author: Iyur
# Dynamic scripted values

# This = Planet
# Evaluates the production of resource
irm_resource_amount_ = {
	base = 0
	complex_trigger_modifier = {
   		trigger = planet_resource_compare
   		parameters = {
   		   	resource = $RES$
   		   	type = $CALC|balance$
   		}
   		mode = add
   		mult = 1
	}
}

# This = System / Sector
# Evaluates the number of colonies within the scoped system / sector
irm_planets_ = {
	base = 0
	complex_trigger_modifier = {
   		potential = {
   			is_scope_type = galactic_object
   		}
   		trigger_scope = root
   		trigger = count_system_planet
   		parameters = {
   		   	limit = {
   		   		[[owned]
	   		   		is_owned_by = root.owner
	   		   		is_under_colonization = no
   		   		]
   		   		[[habitable]
   		   			is_colony = no
   		   			is_under_colonization = no
   		   			or = {
    		   			is_colonizable = yes
   		   				has_modifier = terraforming_candidate
   		   			}
   		   		]
   		   	}
   		}
   		mode = add
   		mult = 1
	}
	complex_trigger_modifier = {
   		potential = {
   			is_scope_type = sector
   		}
   		trigger_scope = root.owner
   		trigger = count_planet_within_border
   		parameters = {
   		   	limit = {
   		   		[[owned]
	   		   		is_owned_by = root.owner
	   		   		is_under_colonization = no
	   		   		exists = sector
	   		   		sector = { is_same_value = root.sector }
   		   		]
   		   		[[habitable]
   		   			is_colony = no
   		   			is_under_colonization = no
	   		   		exists = sector
	   		   		sector = { is_same_value = root.sector }
   		   			or = {
    		   			is_colonizable = yes
   		   				has_modifier = terraforming_candidate
   		   			}
   		   		]
   		   	}
   		}
   		mode = add
   		mult = 1
	}
}

# This = Planet
# Evaluates the production of resource
irm_armies_ = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_planet_army
   		parameters = {
   			limit = {
     		   	[[owned]is_owned_by = root.owner]
     		   	[[hostile]
     		   		not = { is_owned_by = root.owner }
     		   		owner = { is_hostile = root.owner }
     		   	]
   		   		[[assault]army_type = assault_army]
   		   		[[defense]is_defensive_army = yes]
   			}
   		}
   		mode = add
   		mult = 1
	}
}

# This = Planet (sector_capital)
# Checks jumps from sector capital to target system.
# Short distances only.
irm_distance_jumps_ = {
	base = 0

	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 0
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 1
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 2
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 3
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 4
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 5
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 6
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 7
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 8
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 9
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 10
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 11
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 12
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 13
		}
	}
	modifier = {
		add = 1
		distance = {
			source = $source$
			type = hyperlane
			min_jumps > 14
		}
	}
}


#effect = { set_variable = { which = irm_test value =  value:irm_distance_ } }

effect = {
	export_trigger_value_to_variable = {
		trigger = distance
		parameters = {
   			source = root.sector.sector_capital
   			type = hyperlane		
		}
		variable = irm_test2
	}
}